// src/utils/modal-config.ts
import checkBlueIcon from "@assets/icons/icon-check-blue.svg";
import checkRedIcon from "@assets/icons/icon-check-red.svg";
import deleteIcon from "@assets/icons/icon-delete.svg";
import questionIcon from "@assets/icons/icon-question.svg";
import FileInput from "@widgets/common/FileInput";
import SelectBar from "@widgets/common/SelectBar";
import { StarRating } from "@widgets/common/StarRating";
import TitleTextComponent from "@widgets/common/TitleTextComponent";

import type { ButtonProps } from "@/widgets/common/Button";
import type { ReactNode } from "react";

type ModalActionType = "confirm" | "submit" | "close" | "cancel";

export type ModalButton = Omit<ButtonProps, "children" | "onClick"> & {
  text?: string;
  actionType?: ModalActionType;
  to?: string;
};

// ÏïåÎ¶º/Í≤∞Ï†ï Î™®Îã¨
type AlertConfig = {
  type?: "alert"; // Í∏∞Î≥∏Í∞íÏ≤òÎüº ÏÇ¨Ïö© (ÏÉùÎûµ Í∞ÄÎä•)
  icon?: string;
  message: string;
  buttons: ModalButton[];
};

export type FormConfig = {
  type: "form";
  content: (modalData: Record<string, unknown>) => ReactNode;
  buttons: ModalButton[];
};
// Ï†ÑÏ≤¥ Î™®Îã¨ ÏÑ§Ï†ï ÌÉÄÏûÖ
type ModalConfig = AlertConfig | FormConfig;

// üî• Î¶¨ÌÑ∞Îü¥ ÌÉÄÏûÖ Ïú†ÏßÄ + Íµ¨Ï°∞ Í≤ÄÏ¶ùÏùÑ ÎèôÏãúÏóê
export const MODAL_CONFIG = {
  // 'ÌôïÏù∏/Í≤∞Ï†ï' Î™®Îã¨ ÏºÄÏù¥Ïä§
  deleteMentos: {
    icon: deleteIcon,
    message: "Ï†ïÎßê ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?",
    buttons: [
      { text: "ÌôïÏù∏", variant: "danger", size: "lg", actionType: "confirm" },
      { text: "Ï∑®ÏÜå", variant: "cancelWhite", size: "lg", actionType: "close" },
    ],
  },

  dismissUser: {
    icon: deleteIcon,
    message: "Ï†ïÎßê Ï†úÎ™ÖÌïòÏãúÍ≤†ÏäµÎãàÍπå?",
    buttons: [
      { text: "ÌôïÏù∏", variant: "danger", size: "lg", actionType: "confirm" },
      { text: "Ï∑®ÏÜå", variant: "cancelWhite", size: "lg", actionType: "close" },
    ],
  },

  refundMentos: {
    icon: questionIcon,
    message: "Ï†ïÎßê ÌôòÎ∂àÌïòÏãúÍ≤†ÏäµÎãàÍπå?",
    buttons: [
      { text: "ÌôïÏù∏", variant: "primary", size: "lg", actionType: "confirm" },
      { text: "Ï∑®ÏÜå", variant: "cancelWhite", size: "lg", actionType: "close" },
    ],
  },

  // 'ÏïåÎ¶º/ÏôÑÎ£å' Î™®Îã¨ ÏºÄÏù¥Ïä§
  createMentos: {
    icon: checkBlueIcon,
    message: "ÏÉùÏÑ±Ïù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!",
    buttons: [
      {
        text: "Îã´Í∏∞",
        variant: "primary",
        size: "lg",
        actionType: "close",
        to: "/mentee/consumption",
      },
    ],
  },

  updateMentos: {
    icon: checkBlueIcon,
    message: "ÏàòÏ†ïÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!",
    buttons: [
      {
        text: "Îã´Í∏∞",
        variant: "primary",
        size: "lg",
        actionType: "close",
        to: "/mentee/consumption",
      },
    ],
  },

  paySuccess: {
    icon: checkBlueIcon,
    message: "Í≤∞Ï†úÍ∞Ä ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!",
    buttons: [
      {
        text: "ÎÇòÏùò Î©òÌÜ†Ïä§ ÎÇ¥Ïó≠ÏúºÎ°ú Ïù¥Îèô",
        variant: "primary",
        size: "lg",
        actionType: "close",
        to: "/mentee/mymentos",
      },
    ],
  },

  refundSuccess: {
    icon: checkBlueIcon,
    message: "ÌôòÎ∂àÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!",
    buttons: [{ variant: "primary", size: "lg", actionType: "close" }],
  },

  reportComplete: {
    icon: checkRedIcon,
    message: "Ïã†Í≥†Í∞Ä Ï†ëÏàòÎêòÏóàÏäµÎãàÎã§.",
    buttons: [
      { text: "Îã´Í∏∞", variant: "danger", size: "lg", actionType: "close" },
    ],
  },

  reportReject: {
    icon: deleteIcon,
    message: "Ïã†Í≥†Î•º Í±∞Ï†àÌñàÏäµÎãàÎã§",
    buttons: [
      { text: "Îã´Í∏∞", variant: "danger", size: "lg", actionType: "close" },
    ],
  },

  reviewComplete: {
    icon: checkBlueIcon,
    message: "Î¶¨Î∑∞ ÏûëÏÑ±Ïù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§.",
    buttons: [
      { text: "Îã´Í∏∞", variant: "primary", size: "lg", actionType: "close" },
    ],
  },

  refundComplete: {
    icon: checkBlueIcon,
    message: "ÌôòÎ∂àÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§.",
    buttons: [
      { text: "Îã´Í∏∞", variant: "primary", size: "lg", actionType: "close" },
    ],
  },

  deleteComplete: {
    icon: checkRedIcon,
    message: "ÏÇ≠Ï†úÍ∞Ä ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!",
    buttons: [
      { text: "Îã´Í∏∞", variant: "danger", size: "lg", actionType: "close" },
    ],
  },

  dismissSuccess: {
    icon: checkRedIcon,
    message: "Ï†úÎ™ÖÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§.",
    buttons: [
      { text: "Îã´Í∏∞", variant: "danger", size: "lg", actionType: "close" },
    ],
  },

  reportAgree: {
    icon: checkBlueIcon,
    message: "Ïã†Í≥†Î•º ÏäπÏù∏ÌñàÏäµÎãàÎã§.",
    buttons: [
      { text: "Îã´Í∏∞", variant: "primary", size: "lg", actionType: "close" },
    ],
  },

  // 'Ìèº(form)' Î™®Îã¨ ÏºÄÏù¥Ïä§
  reviewMentos: {
    type: "form",
    content: (modalData) => (
      <div className="flex flex-col px-4">
        <StarRating onRatingChange={(modalData as any).onRatingChange} />
        <textarea
          className="h-24 w-full resize-none rounded-[10px] border-[1px] border-solid border-[#E6E7EA] p-2 outline-none focus:border-[#2F6CFF] focus:shadow-[0_0_0_3px_rgba(47,108,255,0.15)]"
          placeholder="ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
        />
      </div>
    ),
    buttons: [
      { text: "Îì±Î°ù", variant: "primary", size: "lg", actionType: "submit" },
      { text: "Ï∑®ÏÜå", variant: "cancelWhite", size: "lg", actionType: "close" },
    ],
  },

  reportMentos: {
    type: "form",
    content: () => (
      <div className="flex flex-col gap-4 px-4">
        <SelectBar />
        <FileInput />
      </div>
    ),
    buttons: [
      { text: "Ïã†Í≥†", variant: "danger", size: "lg", actionType: "submit" },
      { text: "Ï∑®ÏÜå", variant: "cancelWhite", size: "lg", actionType: "close" },
    ],
  },

  reportDetail: {
    type: "form",
    content: (modalData) => (
      <div className="flex flex-col gap-3 px-4">
        <TitleTextComponent
          subtitle="Ïã†Í≥†Ïûê"
          context={(modalData as any).reporter}
        />
        <TitleTextComponent subtitle="Î©òÌÜ†ÎßÅ" context="Ïù∏ÏÉùÌïúÎ∞©" />
        <TitleTextComponent
          subtitle="Ïã†Í≥†Ìï≠Î™©"
          context={(modalData as any).category}
        />
        <TitleTextComponent subtitle="ÌååÏùº" context={(modalData as any).file} />
      </div>
    ),
    buttons: [
      { text: "ÏäπÏù∏", variant: "primary", size: "md", actionType: "submit" },
      { text: "Í±∞Î∂Ä", variant: "danger", size: "md", actionType: "confirm" },
      { text: "Ï∑®ÏÜå", variant: "cancelWhite", size: "md", actionType: "close" },
    ],
  },
} as const satisfies Record<string, ModalConfig>;

export type ModalKey = keyof typeof MODAL_CONFIG;

// ‚úÖ ÌÉÄÏûÖ Í∞ÄÎìú: ÌèºÏù∏ÏßÄ ÌôïÏù∏
export const isFormConfig = (c: ModalConfig): c is FormConfig =>
  "type" in c && c.type === "form";
